/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Sep 7, 2012, 4:56:25 PM
 */
package naogateway.value.simpleTestGUI;

import com.google.protobuf.InvalidProtocolBufferException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

import static naogateway.value.simpleTestGUI.JAdapter.*;


import naogateway.value.Hawactormsg.HAWActorRPCRequest;
import naogateway.value.Hawactormsg.HAWActorRPCResponse;
import naogateway.value.Hawactormsg.MixedValue;
import naogateway.value.Hawactormsg.HAWActorRPCRequest.Builder;

import org.zeromq.ZMQ.Socket;


/**
 *
 * @author david
 */
public class MainFrame extends javax.swing.JFrame {
    private Map<String, String[]> moduleMap; //Modulname -> {Funktionen}
    private ProtobufListModel paramList;
    private Socket socket;
    
    
    /** Creates new form MainFrame */
    public MainFrame(Socket socket) {
        paramList = new ProtobufListModel();
        initComponents();
        initModuleMap();
        this.socket = socket;
    }
    
    private void initModuleMap() {
        moduleMap = new HashMap<String, String[]>();
        moduleMap.put("ALTextToSpeech", new String[] {
                "disableNotifications",
                "enableNotifications",
                "getAvailableLanguages",
                "getLanguage",
                "getParameter",
                "getVoice",
                "getVolume",
                "loadVoicePreference",
                "say",
                "sayToFile",
                "sayToFileAndPlay",
                "setLanguage",
                "setParameter",
                "setVoice",
                "setVolume",
                "stopAll"
        });
        moduleMap.put("ALMotion", new String[] {
                "angleInterpolation",
                "angleInterpolationBezier",
                "angleInterpolationWithSpeed",
                "areResourcesAvailable",
                "changeAngles",
                "changePosition",
                "changeTransform",
                "closeHand",
                "getAngles",
                "getCollisionProtectionEnabled",
                "getCOM",
                "getFallManagerEnabled",
                "getFootGaitConfig",
                "getFootSteps",
                "getJointNames",
                "getLimits",
                "getMass",
                "getNextRobotPosition",
                "getPosition",
                "getRobotConfig",
                "getRobotPosition",
                "getRobotVelocity",
                "getSensorNames",
                "getSmartStiffnessEnabled",
                "getStiffnesses",
                "getSummary",
                "getTaskList",
                "getTransform",
                "getWalkArmsEnable",
                "getWalkArmsEnabled",
                "isCollision",
                "killAll",
                "killTask",
                "killTasksUsingResources",
                "killWalk",
                "openHand",
                "positionInterpolation",
                "positionInterpolations",
                "setAngles",
                "setCollisionProtectionEnabled",
                "setFallManagerEnabled",
                "setFootSteps",
                "setFootStepsWithSpeed",
                "setMotionConfig",
                "setPosition",
                "setSmartStiffnessEnabled",
                "setStiffnesses",
                "setTransform",
                "setWalkArmsEnable",
                "setWalkArmsEnabled",
                "setWalkTargetVelocity",
                "stepTo",
                "stiffnessInterpolation",
                "stopWalk",
                "transformInterpolation",
                "transformInterpolations",
                "updateTrackerTarget",
                "waitUntilWalkIsFinished",
                "walkInit",
                "walkIsActive",
                "walkTo",
                "wbEnable",
                "wbEnableBalanceConstraint",
                "wbEnableEffectorControl",
                "wbFootState",
                "wbGoToBalance",
                "wbSetEffectorControl"
        });
        
        
        
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbxModule = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        cbxMethod = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        paramFrame = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstParams = new javax.swing.JList();
        btnAddParam = new javax.swing.JButton();
        btnRemoveParameter = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnInvokeRequest = new javax.swing.JButton();
        txtStatus = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtResult = new javax.swing.JTextArea();
        pbProgress = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Naoqi RPC Test");
        setName("mainFrame"); // NOI18N

        cbxModule.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "...", "ALAudioDevice", "ALAudioPlayer", "ALAudioRecorder", "ALAudioSourceLocalisation", "ALBattery", "ALFaceDetection", "ALFaceTracker", "ALFsr", "ALInfrared", "ALLandmarkDetection", "ALLaser", "ALLeds", "ALMotion", "ALMotionRecorder", "ALRedBallDetection", "ALRedBallTracker", "ALRobotPose", "ALSensors", "ALSoundDetection", "ALSpeechRecognition", "ALTextToSpeech", "ALVideoDevice", "ALVisionRecognition", "ALVisionToolBox", "DCM" }));
        cbxModule.setName("cbxModule"); // NOI18N
        cbxModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moduleChanged(evt);
            }
        });

        jLabel1.setText("Modul");
        jLabel1.setName("jLabel1"); // NOI18N

        cbxMethod.setEnabled(false);
        cbxMethod.setName("cbxMethod"); // NOI18N

        jLabel2.setText("Methode");
        jLabel2.setName("jLabel2"); // NOI18N

        paramFrame.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        paramFrame.setName("paramFrame"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        lstParams.setModel(paramList);
        lstParams.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstParams.setName("lstParams"); // NOI18N
        lstParams.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                paramSelected(evt);
            }
        });
        jScrollPane1.setViewportView(lstParams);

        jScrollPane1.setBounds(20, 10, 320, 110);
        paramFrame.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnAddParam.setText("Parameter hinzuf√ºgen");
        btnAddParam.setActionCommand("addParam");
        btnAddParam.setEnabled(false);
        btnAddParam.setName("btnAddParam"); // NOI18N
        btnAddParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addParam(evt);
            }
        });
        btnAddParam.setBounds(360, 10, 220, 30);
        paramFrame.add(btnAddParam, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnRemoveParameter.setText("Parameter entfernen");
        btnRemoveParameter.setActionCommand("removeParameter");
        btnRemoveParameter.setEnabled(false);
        btnRemoveParameter.setName("btnRemoveParameter"); // NOI18N
        btnRemoveParameter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeParam(evt);
            }
        });
        btnRemoveParameter.setBounds(360, 80, 220, 30);
        paramFrame.add(btnRemoveParameter, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setText("Parameter");
        jLabel3.setName("jLabel3"); // NOI18N

        btnInvokeRequest.setText("Aufrufen");
        btnInvokeRequest.setActionCommand("invokeRequest"); // NOI18N
        btnInvokeRequest.setEnabled(false);
        btnInvokeRequest.setName("btnInvokeRequest"); // NOI18N
        btnInvokeRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invokeRPC(evt);
            }
        });

        txtStatus.setBackground(new java.awt.Color(229, 228, 185));
        txtStatus.setEditable(false);
        txtStatus.setText("Anwendung gestartet...");
        txtStatus.setName("txtStatus"); // NOI18N

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 24));
        jLabel4.setText("Naoqi testApp");
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText("Ergebnis");
        jLabel5.setName("jLabel5"); // NOI18N

        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setName("jScrollPane2"); // NOI18N

        txtResult.setColumns(20);
        txtResult.setEditable(false);
        txtResult.setRows(1);
        txtResult.setTabSize(2);
        txtResult.setAutoscrolls(true);
        txtResult.setName("txtResult"); // NOI18N
        jScrollPane2.setViewportView(txtResult);

        pbProgress.setToolTipText("");
        pbProgress.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pbProgress.setName("pbProgress"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                            .addComponent(paramFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnInvokeRequest)
                                .addGap(18, 18, 18)
                                .addComponent(pbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxModule, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(84, 84, 84))
                                    .addComponent(cbxMethod, 0, 358, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(jLabel4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxModule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paramFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(btnInvokeRequest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void moduleChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moduleChanged
    String[] methods = moduleMap.get(cbxModule.getSelectedItem());
    if (methods != null) {
        cbxMethod.setModel(new DefaultComboBoxModel(methods));
        cbxMethod.setEnabled(true);
        btnAddParam.setEnabled(true);
        btnInvokeRequest.setEnabled(true);
    } else {
        cbxMethod.setModel(new DefaultComboBoxModel());
        cbxMethod.setEnabled(false);
        btnAddParam.setEnabled(false);
        btnInvokeRequest.setEnabled(false);
    }
}//GEN-LAST:event_moduleChanged

private void addParam(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addParam
    new ParamFrame(paramList).show();
}//GEN-LAST:event_addParam

private void removeParam(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeParam
    paramList.removeElementAt(lstParams.getSelectedIndex());
    btnRemoveParameter.setEnabled(false);
}//GEN-LAST:event_removeParam

private void paramSelected(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_paramSelected
    btnRemoveParameter.setEnabled(true);
}//GEN-LAST:event_paramSelected

private void invokeRPC(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invokeRPC
    new MessageThread().start();    
}//GEN-LAST:event_invokeRPC

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddParam;
    private javax.swing.JButton btnInvokeRequest;
    private javax.swing.JButton btnRemoveParameter;
    private javax.swing.JComboBox cbxMethod;
    private javax.swing.JComboBox cbxModule;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstParams;
    private javax.swing.JLayeredPane paramFrame;
    private javax.swing.JProgressBar pbProgress;
    private javax.swing.JTextArea txtResult;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables
    class MessageThread extends Thread {
        public void run() {
            btnInvokeRequest.setEnabled(false);
            pbProgress.setValue(5);
            txtStatus.setText("Versende Anfrage...");
            Builder param = HAWActorRPCRequest.newBuilder().setModule((String)cbxModule.getSelectedItem()).setMethod((String)cbxMethod.getSelectedItem());

            for(MixedValue mixed : paramList)
                param.addParams(mixed);

            HAWActorRPCRequest rpcReq = param.build();

            paramList.clearAll();
            btnRemoveParameter.setEnabled(false);

            socket.send(rpcReq.toByteArray(),0);
            pbProgress.setValue(10);
            txtStatus.setText("Warte auf Antwort...");
            ProgressThread pThread = new ProgressThread();
            pThread.start();

            byte[] response = socket.recv(0);
            txtStatus.setText("Parse Antwort...");
            pThread.interrupt();
            try {  pThread.join(); } 
            catch (InterruptedException ex) { return; /*Shouldn't happen*/ }
            HAWActorRPCResponse protoResponse = null;
            try {
               protoResponse  = HAWActorRPCResponse.parseFrom(response);
                if (protoResponse.hasError()) {
                    txtResult.insert("Error: " + protoResponse.getError() + "\n",0);
                    txtStatus.setText("RPC abgeschlossen");
                } else if (protoResponse.hasReturnval()){
                    txtResult.insert("-> " + JAdapter.toString(protoResponse.getReturnval()) + "\n",0); 
                    txtStatus.setText("RPC abgeschlossen");
                } else {
                    txtResult.insert("-> Empty response\n",0);
                }
            } catch (InvalidProtocolBufferException ex) {
                txtStatus.setText("Antwort konnte nicht geparsed werden!");
            }
            pbProgress.setValue(0);
            btnInvokeRequest.setEnabled(true);
        }
    }
    
    
    class ProgressThread extends Thread {
        public void run() {
            int val = pbProgress.getValue();
            while (val < 95) {
                pbProgress.setValue(++val);
                try { sleep(500); } 
                catch (InterruptedException ex) { return; }
        }
        txtStatus.setText("Das dauert zu lange... l√§uft der Nao?");
    }
}
}


class ProtobufListModel implements ListModel, Iterable<MixedValue> {
    private List<MixedValue> variants = new ArrayList<MixedValue>();
    private List<ListDataListener> listeners = new ArrayList<ListDataListener>();
    
    public void addElement(MixedValue elem) {
        variants.add(elem);
        for(ListDataListener l : listeners)
            l.contentsChanged(new ListDataEvent(this, ListDataEvent.INTERVAL_ADDED, variants.size()-1, variants.size()-1));
    }
    
    public void clearAll() {
        int oldSize = variants.size();
        variants.clear();
        for(ListDataListener l : listeners)
            l.contentsChanged(new ListDataEvent(this, ListDataEvent.INTERVAL_REMOVED, 0, oldSize-1));
    }
    
    public void removeElementAt(int i) {
        variants.remove(i);
        for(ListDataListener l : listeners)
            l.contentsChanged(new ListDataEvent(this, ListDataEvent.INTERVAL_REMOVED, i,i));
    }
    
    @Override
    public int getSize() {
        return variants.size();
    }
    
    
    @Override
    public Object getElementAt(int i) {
        return JAdapter.toString(variants.get(i));
    }

    @Override
    public void addListDataListener(ListDataListener ll) {
        listeners.add(ll);
    }

    @Override
    public void removeListDataListener(ListDataListener ll) {
        listeners.remove(ll);
    }

    @Override
    public Iterator<MixedValue> iterator() {
        return variants.iterator();
    }    
}